#!/usr/bin/env python3
import os
import sys
import json
import syslog
import logging
import argparse

logging.basicConfig(level=logging.DEBUG, format='%(levelname)s: %(message)s')

class generic_credential_provider:
    def __init__(self):
        args = generic_credential_provider_utilities.parse_args()
        if not args.debug:
            logging.disable(logging.DEBUG)
        if args.version:
            print(f"generic-credential-provider version 1.0.0")
            exit(0)

        base_path = args.credroot

        syslog.openlog("generic-credential-provider", syslog.LOG_PID, syslog.LOG_USER)

        # Read the input JSON from stdin
        input_json = json.load(sys.stdin)
        repository = generic_credential_provider_utilities.get_image_repository(input_json)

        # Generate possible JSON filenames
        possible_filenames = generic_credential_provider_utilities.generate_possible_filenames(repository)

        # Search for the JSON file in the specified directory
        found_json_file = generic_credential_provider_utilities.find_json_file(possible_filenames, base_path)

        if found_json_file:
            # If a matching JSON file is found, read the username and password
            credentials = generic_credential_provider_utilities.read_credentials(found_json_file)
            username = credentials.get("username", "")
            password = credentials.get("password", "")
            duration = credentials.get("duration", "0h5m0s")
        else:
            syslog.syslog(syslog.LOG_ERR, f"Failed to fulfill credential request for {repository}")
            logging.error(f'Error running credential provider plugin: {repository} is an unknown source')
            exit(1)

        # Create the output JSON response
        output_json = {
            "kind": "CredentialProviderResponse",
            "apiVersion": "credentialprovider.kubelet.k8s.io/v1",
            "cacheKeyType": "Registry",
            "cacheDuration": duration,
            "auth": {
                repository: {
                    "username": username,
                    "password": password
                }
            }
        }
        syslog.syslog(syslog.LOG_INFO, f"Credential request fulfilled for {repository}")

        # Print the output JSON response to stdout
        json.dump(output_json, sys.stdout)

class generic_credential_provider_utilities:
    def parse_args():
        parser = argparse.ArgumentParser(description="A generic credential provider for Kubernetes")

        parser.add_argument('--version', '-v', action='store_true', help="version for generic-credential-provider")
        parser.add_argument('--debug', '-d', action='store_true', help="Enable debug output")
        parser.add_argument('--credroot', '-c', help="Provide a new credential root, only used for testing", default="/etc/kubernetes/registries/")

        return parser.parse_args()

    def get_image_repository(input_json):
        image = input_json.get("image", "")
        repository = image.split('/')[0].split(':')[0]
        logging.debug(f"Got repository name: {repository}")
        return repository

    def generate_possible_filenames(repository):
        possible_filenames = []
        possible_filename = ""
        parts = repository.split(".")
        parts.reverse()
        for part in parts:
            if possible_filename == "":
                possible_filename = part
            else:
                possible_filename = f"{part}.{possible_filename}"
            possible_filenames.append(possible_filename)
        possible_filenames.reverse()
        return possible_filenames

    def find_json_file(possible_filenames, base_path):
        for filename in possible_filenames:
            json_file_path = os.path.join(base_path, f"{filename}.json")
            logging.debug(f"Testing json_file_path: {json_file_path}")
            if os.path.exists(json_file_path):
                logging.debug(f"Got it")
                return json_file_path
        return None

    def read_credentials(json_file_path):
        with open(json_file_path, "r") as json_file:
            credentials = json.load(json_file)
            logging.debug(f"Got credentials: {credentials}")
            return credentials

if __name__ == "__main__":
    generic_credential_provider()
